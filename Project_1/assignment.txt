db.inventory.insertMany([

    { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A", tags: ["red", "blank"], dim_cm: [14, 21], instock: [{ warehouse: "C", qty: 5 }] },
    { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D", tags: ["red", "blank", "plain"], dim_cm: [14, 21], instock: [{ warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 }] },
    { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D", tags: ["blank", "red"], dim_cm: [22.85, 30], instock: [{ warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 }] },
    { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A", tags: ["blue"], dim_cm: [10, 15.25], instock: [{ warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 }] }

]);



1. Select * from Inventory :  Select all dcument from inventory
> db.inventory.find().pretty()

2  : We use field:value expression
// Select * from inventoru where status  ="D"
> db.inventory.find({status:"D"})

3. Select * frm inventory where status in("A","D")
// retrieves all documents from the inventory collection where status equals either "A" or "D":
> db.inventory.find({status:{$in:["D","A"]}})

4. Specify AND Conditions : Retrive all document whose status is A and qty is less than 30
> db.inventory.find({$and:[{status:"A"},{qty:{$lt:30}}]})

5. Specify Or Condition :Retrive all documents where  status equal A and qty less thatn 30
> db.inventory.find({$or:[{status:"A"},{qty:{$lt:30}}]})

6. Joins query clauses with a logical NOR returns all documents that fail to match both clauses.

7. Select all documents where status equal to A and Qty less than 30 or item starts with p charact
> db.inventory.find({$or:[{$and:[{status:"A"},{qty:{$lt:30}}]},{item:"/p.*/"}]})

8. Select all documents where the field size {h:14,w:21 uom :"cm"}
> db.inventory.find({$and:[{"size.h":14},{"size.w":21},{"size.uom":"cm"}]})

9. Specify match on nested fields
// Select all document where the field uom nested in the size field equal in
> db.inventory.find({$tags:{$in:["red","black"]}})

10. Specify match using query operator
> db.inventory.find({ "size.h": { $lt: 15 } })

11. Specify AND condition. Select all documents where the nested field h is less than 15
// the nested field uom equals in and the status field equals D
> db.inventory.find({$and:[{"size.h":{$lt:15}},{"size.uom":"in"},{"status":"D"}]})

12. Specify condition where value is exact match an array
// Select all documents where the field tags values is an array with exactly 2 elements "red" and black in the 
// specified order
> db.inventory.find({tags:{$in:["red","blank"]}})

13. Select all documents where the field tags values is an array with exactly 2 elements "red" and black in the 
// in any order
> db.inventory.find({tags:["red","blank"]})

14. select all documents where tag is an array that contains the string "red" as one of its elements
> db.inventory.find({tags:["red"]})
> db.inventory.find({tags:{$in:["red"]}})

15. Select all document where the dim_Cm contains atleast one element whose valies is greater than 25
> db.inventory.find({$or:[{"dim_cm.0":{$gt:25}},{"dim_cm.1":{$gt:25}}]})

16. specify multiple conditions fo array elements: Select all document where dim is greater than 15 and 20  or both
// in this all the element weder its greater than 20 or 15 or both will be selected
> db.inventory.find({$or:[{dim_cm:{$gt:15}},{dim_cm:{$gt:20}},{$and:[{dim_cm:{$gt:15}},{dim_cm:{$gt:20}}]}]})

17. Find doc tag having length 3
> db.inventory.find({tags:{$size:3}})

18. Selects all documents where an element in the instock array match specified document
> db.inventory.find({"instock.warehouse":"A"})

19. Select all document where instock qty is less that or equal to 20
> db.inventory.find({"instock.qty":{$lte:20}})

20. Selects all documents where the instock array has atleast one embedded document that contains the field
//qty whose value is less than or equal to 20
> db.inventory.find({$or:[{"instock.0.qyt":{$lte:20}},{"instock.1.qty":{$lte:20}}]})

21. select any document nested in the stock array has the qty greater than 10 and qty field has less than 20
> db.inventory.find({$and:[{"instock.0.qyt":{$gt:10}},{"instock.1.qty":{$lt:20}}]})

22. Select item and status where status is A
> db.inventory.find({status:"A"},{status:0,item:0})

23. Return all the fields except status and instock
> db.inventory.find({},{status:0,instock:0})

24. The { item : { $type: 10 } } query matches only documents that contain the item field whose value is null; 
//i.e. the value of the item field is of BSON Type Null (type number 10)
> db.inventory.find({item:{$type:10}})

25. Query matches documents that do not contain the item field:
> db.inventory.find({item:{$in:[]}})



> db.inventory.insertMany([
...
...     { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "A", tags: ["red", "blank"], dim_cm: [14, 21], instock: [{ warehouse: "C", qty: 5 }] },
...     { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D", tags: ["red", "blank", "plain"], dim_cm: [14, 21], instock: [{ warehouse: "A", qty: 60 }, { warehouse: "B", qty: 15 }] },
...     { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D", tags: ["blank", "red"], dim_cm: [22.85, 30], instock: [{ warehouse: "A", qty: 40 }, { warehouse: "B", qty: 5 }] },
...     { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A", tags: ["blue"], dim_cm: [10, 15.25], instock: [{ warehouse: "B", qty: 15 }, { warehouse: "C", qty: 35 }] }
...
... ]);



